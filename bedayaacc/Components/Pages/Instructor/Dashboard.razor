@page "/instructor/dashboard"
@attribute [Authorize(Roles = "Instructor")]

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using bedayaacc.Components.Layout
@using bedayaacc.Helpers
@using bedayaacc.Models
@using bedayaacc.Repositories
@using bedayaacc.Services
@using static System.Net.WebRequestMethods
@inject NavigationManager Navigation
@inject TranslationService TranslationService
@inject IPaymentRepository PaymentRepository
@inject IBankAccountRepository BankRepo
@inject IStudentRepository StudentsRepo
@inject IExamRepository ExamsRepo

@inject IJSRuntime JSRuntime

@layout ExternalLayout
<PageTitle>@Tr("Instructor.Nav.Dashboard")</PageTitle>

<link rel="stylesheet" href="css/instructor-dashboard.css" />

<div class="bedaya-instructor-page">
    <!-- Optional mini header -->
    @*   <header class="bedaya-instructor-header">
        <div class="bedaya-container bedaya-instructor-header-content">
            <div>
                <h1 class="bedaya-instructor-name">@Tr("Instructor.Header.Welcome")</h1>
                <div class="bedaya-instructor-title">@Tr("Instructor.Header.Subtitle")</div>
            </div>
        </div>
    </header> *@

    <div class="bedaya-instructor-container">
        <!-- Left: Tabs Nav -->
        <nav class="bedaya-instructor-nav">
            <div class="@GetTabClass(InstructorTab.Dashboard)" @onclick="() => SetTab(InstructorTab.Dashboard)">
                <i class="fas fa-tachometer-alt" aria-hidden="true"></i>
                <span>@Tr("Instructor.Nav.Dashboard")</span>
            </div>
            <div class="@GetTabClass(InstructorTab.Exams)" @onclick="() => SetTab(InstructorTab.Exams)">
                <i class="fas fa-file-alt" aria-hidden="true"></i>
                <span>@Tr("Instructor.Nav.Exams")</span>
            </div>
            <div class="@GetTabClass(InstructorTab.Students)" @onclick="() => SetTab(InstructorTab.Students)">
                <i class="fas fa-user-graduate" aria-hidden="true"></i>
                <span>@Tr("Instructor.Nav.Students")</span>
            </div>
            <div class="@GetTabClass(InstructorTab.Payments)" @onclick="() => SetTab(InstructorTab.Payments)">
                <i class="fas fa-money-check-alt" aria-hidden="true"></i>
                <span>@Tr("Instructor.Nav.Payments")</span>
            </div>
            <div class="@GetTabClass(InstructorTab.Bank)" @onclick="() => SetTab(InstructorTab.Bank)">
                <i class="fas fa-university" aria-hidden="true"></i>
                <span>@Tr("Instructor.Nav.Bank")</span>
            </div>
            <div class="@GetTabClass(InstructorTab.Settings)" @onclick="() => SetTab(InstructorTab.Settings)">
                <i class="fas fa-cog" aria-hidden="true"></i>
                <span>@Tr("Instructor.Nav.Settings")</span>
            </div>
        </nav>

        <!-- Right: Tabs Content -->
        <div class="bedaya-instructor-content">
            <!-- Dashboard -->
            <div class="bedaya-instructor-tab @(activeTab == InstructorTab.Dashboard ? "active" : null)">
                <h3 class="bedaya-section-title">@Tr("Instructor.Dashboard.Title")</h3>

                <div class="bedaya-dashboard-grid">
                    <div class="bedaya-dashboard-card">
                        <div class="bedaya-dashboard-icon"><i class="fas fa-users"></i></div>
                        <div class="bedaya-dashboard-content">
                            <h4>—</h4>
                            <p>@Tr("Instructor.Dashboard.Students")</p>
                        </div>
                    </div>
                    <div class="bedaya-dashboard-card">
                        <div class="bedaya-dashboard-icon"><i class="fas fa-file-alt"></i></div>
                        <div class="bedaya-dashboard-content">
                            <h4>—</h4>
                            <p>@Tr("Instructor.Dashboard.Exams")</p>
                        </div>
                    </div>
                    <div class="bedaya-dashboard-card">
                        <div class="bedaya-dashboard-icon"><i class="fas fa-check-circle"></i></div>
                        <div class="bedaya-dashboard-content">
                            <h4>—</h4>
                            <p>@Tr("Instructor.Dashboard.Completed")</p>
                        </div>
                    </div>
                    <div class="bedaya-dashboard-card">
                        <div class="bedaya-dashboard-icon"><i class="fas fa-wallet"></i></div>
                        <div class="bedaya-dashboard-content">
                            <h4>—</h4>
                            <p>@Tr("Instructor.Dashboard.Revenue")</p>
                        </div>
                    </div>
                </div>

                <div class="bedaya-dashboard-charts">
                    <div class="bedaya-chart-section">
                        <h4 class="bedaya-chart-title">@Tr("Instructor.Dashboard.Enrollment.Title")</h4>
                        <div class="bedaya-chart-placeholder">
                            <i class="fas fa-chart-bar"></i>
                            <p>@Tr("Instructor.Dashboard.Enrollment.Placeholder")</p>
                        </div>
                    </div>
                    <div class="bedaya-chart-section">
                        <h4 class="bedaya-chart-title">@Tr("Instructor.Dashboard.Completion.Title")</h4>
                        <div class="bedaya-chart-placeholder">
                            <i class="fas fa-chart-pie"></i>
                            <p>@Tr("Instructor.Dashboard.Completion.Placeholder")</p>
                        </div>
                    </div>
                </div>

                <div class="bedaya-dashboard-quick-actions">
                    <h4 class="bedaya-section-title">@Tr("Instructor.Dashboard.QuickActions.Title")</h4>
                    <div class="bedaya-quick-actions-grid">
                        <button class="bedaya-quick-action" @onclick="NavigateToExams">
                            <i class="fas fa-plus-circle"></i>
                            <span>@Tr("Instructor.Dashboard.QuickActions.CreateExam")</span>
                        </button>
                        <button class="bedaya-quick-action" @onclick="() => SetTab(InstructorTab.Payments)">
                            <i class="fas fa-receipt"></i>
                            <span>@Tr("Instructor.Dashboard.QuickActions.ReviewPayments")</span>
                        </button>
                        <button class="bedaya-quick-action" @onclick="() => SetTab(InstructorTab.Bank)">
                            <i class="fas fa-university"></i>
                            <span>@Tr("Instructor.Dashboard.QuickActions.AddBank")</span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Exams -->
            <!-- Exams -->
            <div class="bedaya-instructor-tab @(activeTab == InstructorTab.Exams ? "active" : null)">
                <div class="bedaya-instructor-exams">
                    <div class="bedaya-exams-header" style="margin-bottom:1rem">
                        <h3 class="bedaya-section-title">@Tr("Instructor.Exams.Title")</h3>

                    </div>



                    <!-- Toolbar -->
                    <div class="bedaya-toolbar" style="display:flex; gap:.5rem; flex-wrap:wrap; align-items:center;">
                        <input class="bedaya-form-input" style="max-width:260px"
                               placeholder='@Tr("Common.SearchPlaceholder")'
                               @bind="examSearch" @bind:event="oninput" />

                        <select class="bedaya-form-select" @onchange="e => examCategoryId = string.IsNullOrWhiteSpace(e?.Value?.ToString()) ? (int?)null : int.Parse(e.Value!.ToString()!)">
                            <option value="">@Tr("Common.AllCategories")</option>
                            @*  @foreach (var cat in categories)
                            {
                                <option value="@cat.CategoryId">@cat.CategoryNameAr</option>
                            } *@
                        </select>

                        <select class="bedaya-form-select" @onchange="OnExamIsActiveChanged">
                            <option value="">@Tr("Common.AllStatuses")</option>
                            <option value="1">@Tr("Common.Active")</option>
                            <option value="0">@Tr("Common.Inactive")</option>
                        </select>

                        <select class="bedaya-form-select" @onchange="OnExamIsPublicChanged">
                            <option value="">@Tr("Exams.AllVisibility")</option>
                            <option value="1">@Tr("Exams.Public")</option>
                            <option value="0">@Tr("Exams.Private")</option>
                        </select>


                        <button class="bedaya-btn bedaya-btn-primary" @onclick="ReloadExams">
                            <i class="fas fa-sync"></i> @Tr("Common.Apply")
                        </button>

                        <div style="flex:1"></div>

                        <button class="bedaya-btn bedaya-btn-primary" @onclick="GoCreateExam">
                            <i class="fas fa-plus"></i> @Tr("Instructor.Exams.Create")
                        </button>
                    </div>

                    @if (examsLoading2)
                    {
                        <div class="loading-container"><div class="spinner"></div><p>@Tr("Common.Loading")</p></div>
                    }
                    else if (exams.Count == 0)
                    {
                        <div class="empty-state">
                            <i class="fas fa-file-alt"></i>
                            <h3>@Tr("Common.NoResults")</h3>
                        </div>
                    }
                    else
                    {
                        <div class="bedaya-table-wrapper table-in-tab">
                            <table class="bedaya-table">
                                <thead>
                                    <tr>
                                        <th>@Tr("Exams.Columns.Title")</th>
                                        <th>@Tr("Exams.Columns.Category")</th>
                                        <th>@Tr("Exams.Columns.Duration")</th>
                                        <th>@Tr("Exams.Columns.Questions")</th>
                                        <th>@Tr("Exams.Columns.Price")</th>
                                        <th>@Tr("Exams.Columns.Visibility")</th>
                                        <th>@Tr("Exams.Columns.Status")</th>
                                        <th>@Tr("Exams.Columns.Stats")</th>
                                        <th style="width:240px">@Tr("Exams.Columns.Actions")</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ex in exams)
                                    {
                                        <tr>
                                            <td>
                                                <div style="display:flex;flex-direction:column">
                                                    <strong>@(string.IsNullOrWhiteSpace(ex.ExamTitleAr) ? ex.ExamTitleEn : ex.ExamTitleAr)</strong>
                                                    @if (!string.IsNullOrWhiteSpace(ex.DescriptionAr))
                                                    {
                                                        <small class="muted clamp-1">@ex.DescriptionAr</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>@(string.IsNullOrWhiteSpace(ex.CategoryNameAr) ? ex.CategoryNameEn : ex.CategoryNameAr)</td>
                                            <td>@ex.DurationMinutes @Tr("Common.Minutes")</td>
                                            <td>@ex.TotalQuestions</td>
                                            <td>
                                                @if (ex.IsFree)
                                                {
                                                    <span class="bedaya-badge badge-success">@Tr("Exams.Free")</span>
                                                }
                                                else
                                                {

                                                    <span>@($"{ex.Price:0.##}")</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="bedaya-badge @(ex.IsPublic ? "badge-info" : "badge-neutral")">
                                                    @(ex.IsPublic? Tr("Exams.Public") : Tr("Exams.Private"))
                                                </span>
                                            </td>
                                            <td>
                                                <span class="bedaya-badge @(ex.IsActive ? "badge-success" : "badge-danger")">
                                                    @(ex.IsActive? Tr("Common.Active") : Tr("Common.Inactive"))
                                                </span>
                                            </td>
                                            <td>
                                                <div style="display:flex; gap:6px; flex-wrap:wrap">
                                                    <span class="bedaya-badge badge-neutral"><i class="fas fa-history"></i> @ex.AttemptsCount</span>
                                                    <span class="bedaya-badge badge-neutral"><i class="fas fa-users"></i> @ex.UniqueStudents</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div style="display:flex; gap:8px; flex-wrap:wrap">
                                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="() => GoEditExam(ex.ExamId)">
                                                        <i class="fas fa-edit"></i> @Tr("Exams.Edit")
                                                    </button>
                                                    <button class="bedaya-btn bedaya-btn-primary" @onclick="() => GoResults(ex.ExamId)">
                                                        <i class="fas fa-chart-bar"></i> @Tr("Exams.Results")
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            <div style="display:flex; justify-content:space-between; align-items:center; padding:10px 12px;">
                                <small>@Tr("Common.Total"): @examsTotal</small>
                                <div style="display:flex; gap:6px; align-items:center;">
                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="PrevExamsPage" disabled="@(examsPage <= 1)">
                                        <i class="fas fa-chevron-right" style="transform:scaleX(-1)"></i> @Tr("Common.Prev")
                                    </button>
                                    <span>@examsPage</span>
                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="NextExamsPage" disabled="@(exams.Count < examsPageSize)">
                                        @Tr("Common.Next") <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Students -->
            <!-- Students -->
            <div class="bedaya-instructor-tab @(activeTab == InstructorTab.Students ? "active" : null)">
                <div class="bedaya-instructor-students">
                    <h3 class="bedaya-section-title">@Tr("Instructor.Students.Title")</h3>

                    <div class="bedaya-toolbar">
                        <input class="bedaya-form-input" style="max-width:260px"
                               placeholder='@Tr("Instructor.Students.Search")'
                               @bind="studentSearch" @bind:event="oninput" />
                        <button class="bedaya-btn bedaya-btn-ghost" @onclick="ReloadStudents">
                            <i class="fas fa-search"></i> @Tr("Common.Apply")
                        </button>
                    </div>

                    @if (studentsLoading)
                    {
                        <div class="loading-container"><div class="spinner"></div><p>@Tr("Common.Loading")</p></div>
                    }
                    else if (students.Count == 0)
                    {
                        <div class="empty-state">
                            <i class="fas fa-user-graduate"></i>
                            <h3>@Tr("Common.NoResults")</h3>
                        </div>
                    }
                    else
                    {
                        <div class="bedaya-table-wrapper table-in-tab">
                            <table class="bedaya-table">
                                <thead>
                                    <tr>
                                        <th>@Tr("Instructor.Students.Table.Student")</th>
                                        <th>@Tr("Instructor.Students.Table.Email")</th>
                                        <th>@Tr("Instructor.Students.Table.Exams")</th>
                                        <th>@Tr("Instructor.Students.Table.Attempts")</th>
                                        <th>@Tr("Instructor.Students.Table.LastActivity")</th>
                                        <th style="width:160px">@Tr("Instructor.Students.Table.Actions")</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var s in students)
                                    {
                                        <tr>
                                            <td><strong>@(string.IsNullOrWhiteSpace(s.FullName) ? $"#{s.UserId}" : s.FullName)</strong></td>
                                            <td>@s.Email</td>
                                            <td>@s.ExamsCount</td>
                                            <td>@s.AttemptsCount</td>
                                            <td>@LastActivityText(s.LastActivity)</td>
                                            <td>
                                                <button class="bedaya-btn bedaya-btn-primary" @onclick="() => OpenStudentDetails(s.UserId)">
                                                    <i class="fas fa-eye"></i> @Tr("Common.View")
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            <div style="display:flex; justify-content:space-between; align-items:center; padding:10px 12px;">
                                <small>@Tr("Common.Total"): @studentsTotal</small>
                                <div style="display:flex; gap:6px; align-items:center;">
                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="PrevStudentsPage" disabled="@(studentsPage <= 1)">
                                        <i class="fas fa-chevron-right" style="transform:scaleX(-1)"></i> @Tr("Common.Prev")
                                    </button>
                                    <span>@studentsPage</span>
                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="NextStudentsPage" disabled="@(students.Count < studentsPageSize)">
                                        @Tr("Common.Next") <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }

                    @if (showStudentModal)
                    {
                        <div class="bedaya-modal" style="display:flex">
                            <div class="bedaya-modal-content" style="max-width:900px;">
                                <div class="bedaya-modal-header">
                                    <h3>@(studentDetails?.FullName ?? Tr("Common.Loading"))</h3>
                                    <button class="bedaya-modal-close" @onclick="CloseStudentModal">&times;</button>
                                </div>
                                <div class="bedaya-modal-body">
                                    @if (studentDetails is null)
                                    {
                                        <div class="loading-container"><div class="spinner"></div><p>@Tr("Common.Loading")</p></div>
                                    }
                                    else
                                    {
                                        <div style="display:grid; grid-template-columns:1fr 1fr; gap:12px; margin-bottom:10px">
                                            <div><strong>@Tr("Profile.Overview.Email"):</strong> <span>@studentDetails.Email</span></div>
                                            <div><strong>@Tr("Profile.Overview.Phone"):</strong> <span>@(studentDetails.Phone ?? "-")</span></div>
                                            <div><strong>@Tr("Instructor.Students.Table.Exams"):</strong> <span>@studentDetails.TotalExams</span></div>
                                            <div><strong>@Tr("Instructor.Students.Table.Attempts"):</strong> <span>@studentDetails.TotalAttempts</span></div>
                                        </div>

                                        <h4 class="bedaya-chart-title" style="margin-top:10px">@Tr("Instructor.Students.Orders")</h4>
                                        <div class="bedaya-table-wrapper" style="margin-bottom:10px">
                                            <table class="bedaya-table">
                                                <thead>
                                                    <tr>
                                                        <th>@Tr("Instructor.Payments.Table.Exam")</th>
                                                        <th>@Tr("Instructor.Payments.Table.Amount")</th>
                                                        <th>@Tr("Instructor.Payments.Table.Status")</th>
                                                        <th>@Tr("Profile.Certificates.Date")</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @if (studentDetails.Orders.Count == 0)
                                                    {
                                                        <tr><td colspan="4">-</td></tr>
                                                    }
                                                    else
                                                    {
                                                        @foreach (var o in studentDetails.Orders)
                                                        {
                                                            <tr>
                                                                <td>@o.ExamTitle</td>
                                                                <td>@($"{o.PaidAmount:0.##} {o.Currency}")</td>
                                                                <td><span class="bedaya-badge badge-neutral">@o.Status</span></td>
                                                                <td>@((o.PaidAt ?? o.CreatedAt)?.ToString("yyyy-MM-dd HH:mm"))</td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>

                                        <h4 class="bedaya-chart-title">@Tr("Instructor.Students.Attempts")</h4>
                                        <div class="bedaya-table-wrapper">
                                            <table class="bedaya-table">
                                                <thead>
                                                    <tr>
                                                        <th>@Tr("Profile.Progress.Columns.Exam")</th>
                                                        <th>@Tr("Profile.Progress.Columns.Last")</th>
                                                        <th>@Tr("Exams.Marks")</th>
                                                        <th>@Tr("Profile.Progress.Columns.Status")</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @if (studentDetails.Attempts.Count == 0)
                                                    {
                                                        <tr><td colspan="4">-</td></tr>
                                                    }
                                                    else
                                                    {
                                                        @foreach (var a in studentDetails.Attempts)
                                                        {
                                                            <tr>
                                                                <td>@a.ExamTitle</td>
                                                                <td>@((a.SubmittedAt ?? a.StartedAt).ToString("yyyy-MM-dd HH:mm"))</td>
                                                                <td>@($"{(a.Percentage ?? 0):0.##}%")</td>
                                                                <td>
                                                                    <span class="bedaya-badge @(a.IsPassed ? "badge-success" : "badge-danger")">
                                                                        @(a.IsPassed? Tr("Common.Passed") : Tr("Common.Failed"))
                                                                    </span>
                                                                </td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                </div>
                                <div class="bedaya-modal-footer">
                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="CloseStudentModal">@Tr("Common.Close")</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Payments -->
            <!-- Payments -->
            <div class="bedaya-instructor-tab @(activeTab == InstructorTab.Payments ? "active" : null)">
                <div class="bedaya-instructor-payments">
                    <h3 class="bedaya-section-title">@Tr("Instructor.Payments.Title")</h3>

                    <!-- Toolbar -->
                    <div class="bedaya-toolbar">
                        <select class="bedaya-form-select" @onchange="OnPayStatusChanged">
                            <option value="">@Tr("Instructor.Payments.Filter.All")</option>
                            <option value="PAID_UNVERIFIED" selected="@("PAID_UNVERIFIED" == payStatusFilter)">@Tr("Instructor.Payments.Filter.Unverified")</option>
                            <option value="PAID" selected="@("PAID" == payStatusFilter)">@Tr("Instructor.Payments.Filter.Verified")</option>
                            <option value="FAILED" selected="@("FAILED" == payStatusFilter)">@Tr("Instructor.Payments.Filter.Rejected")</option>
                        </select>

                        <input class="bedaya-form-input"
                               style="max-width:260px"
                               placeholder='@Tr("Instructor.Payments.Search.Placeholder")'
                               @bind="paySearch" @bind:event="oninput" />

                        <button class="bedaya-btn bedaya-btn-primary" @onclick="ReloadPayments">
                            <i class="fas fa-sync"></i> @Tr("Common.Apply")
                        </button>

                        <div style="flex:1"></div>

                        <button class="bedaya-btn bedaya-btn-ghost" @onclick="ExportCurrentPageCsv" disabled="@payLoading">
                            <i class="fas fa-file-export"></i> @Tr("Common.ExportCSV")
                        </button>
                    </div>

                    <!-- Summary strip -->
                    <div class="bedaya-table-wrapper" style="margin-bottom:10px; overflow:visible">
                        <div style="display:flex; gap:10px; flex-wrap:wrap; padding:10px 12px; align-items:center">
                            <span class="bedaya-tag"><i class="fas fa-list-ol"></i> @Tr("Common.Total"): @payTotal</span>
                            <span class="bedaya-tag"><i class="fas fa-dollar-sign"></i> @Tr("Instructor.Payments.PageTotal"): @FormatMoney(pageTotalAmount)</span>
                            <span class="bedaya-tag"><i class="fas fa-check-circle"></i> @Tr("Instructor.Payments.Verified"): @cntVerified</span>
                            <span class="bedaya-tag"><i class="fas fa-hourglass-half"></i> @Tr("Instructor.Payments.Unverified"): @cntUnverified</span>
                            <span class="bedaya-tag"><i class="fas fa-times-circle"></i> @Tr("Instructor.Payments.Rejected"): @cntRejected</span>
                        </div>
                    </div>

                    @if (payLoading)
                    {
                        <div class="loading-container">
                            <div class="spinner"></div>
                            <p>@Tr("Common.Loading")</p>
                        </div>
                    }
                    else if (payments.Count == 0)
                    {
                        <div class="empty-state">
                            <i class="fas fa-receipt"></i>
                            <h3>@Tr("Instructor.Payments.Empty")</h3>
                        </div>
                    }
                    else
                    {
                        <div class="bedaya-table-wrapper">
                            <table class="bedaya-table">
                                <thead>
                                    <tr>
                                        <th>@Tr("Instructor.Payments.Table.Student")</th>
                                        <th>@Tr("Instructor.Payments.Table.Exam")</th>
                                        <th>@Tr("Instructor.Payments.Table.Amount")</th>
                                        <th>@Tr("Instructor.Payments.Table.BankRef")</th>
                                        <th>@Tr("Instructor.Payments.Table.Receipt")</th>
                                        <th>@Tr("Instructor.Payments.Table.Status")</th>
                                        <th style="width:230px;">@Tr("Instructor.Payments.Table.Actions")</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var o in payments)
                                    {
                                        <tr>
                                            <td>
                                                <div style="display:flex; flex-direction:column;">
                                                    <strong>@(o.UserName ?? $"#{o.UserId}")</strong>
                                                    <small>@o.UserEmail</small>
                                                </div>
                                            </td>
                                            <td>@o.ExamTitle</td>
                                            <td>@($"{o.PaidAmount:0.##} {o.Currency}")</td>
                                            <td>@(string.IsNullOrWhiteSpace(o.BankRef) ? "-" : o.BankRef)</td>
                                            <td>
                                                @if (!string.IsNullOrWhiteSpace(o.ReceiptUrl))
                                                {
                                                    <a href="@o.ReceiptUrl" target="_blank" class="bedaya-link">
                                                        <i class="fas fa-file-invoice"></i> @Tr("Instructor.Payments.ViewReceipt")
                                                    </a>
                                                }
                                                else
                                                {
                                                    <span>-</span>
                                                }
                                            </td>
                                            <td>@DisplayStatusPill(o.Status)</td>
                                            <td>
                                                <div style="display:flex; gap:8px; flex-wrap:wrap;">
                                                    <button class="bedaya-btn bedaya-btn-primary"
                                                            disabled="@(payActing || o.Status == "PAID")"
                                                            @onclick="() => VerifyOrder(o.OrderId)">
                                                        <i class="fas fa-check"></i> @Tr("Instructor.Payments.Verify")
                                                    </button>
                                                    <button class="bedaya-btn bedaya-btn-ghost"
                                                            disabled="@(payActing || o.Status == "FAILED")"
                                                            @onclick="() => RejectOrder(o.OrderId)">
                                                        <i class="fas fa-times"></i> @Tr("Instructor.Payments.Reject")
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            <!-- Pager -->
                            <div style="display:flex; justify-content:space-between; align-items:center; padding:10px 12px;">
                                <small>@Tr("Common.Total"): @payTotal</small>
                                <div style="display:flex; gap:6px; align-items:center;">
                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="PrevPayPage" disabled="@(payPage <= 1)">
                                        <i class="fas fa-chevron-right" style="transform:scaleX(-1)"></i> @Tr("Common.Prev")
                                    </button>
                                    <span>@payPage</span>
                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="NextPayPage" disabled="@(payments.Count < payPageSize)">
                                        @Tr("Common.Next") <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>


            <!-- Bank Accounts -->
            <!-- Bank Accounts -->
            <div class="bedaya-instructor-tab @(activeTab == InstructorTab.Bank ? "active" : null)">
                <div class="bedaya-instructor-bank">
                    <h3 class="bedaya-section-title">@Tr("Instructor.Bank.Title")</h3>

                    <!-- Toolbar -->
                    <div class="bedaya-toolbar">
                        <input class="bedaya-form-input" style="max-width:260px"
                               placeholder='@Tr("Common.SearchPlaceholder")'
                               @bind="bankSearch" @bind:event="oninput" />
                        <button class="bedaya-btn bedaya-btn-ghost" @onclick="ApplyBankSearch">
                            <i class="fas fa-search"></i> @Tr("Common.Apply")
                        </button>

                        <div style="flex:1"></div>

                        <button class="bedaya-btn bedaya-btn-primary" @onclick="OpenAddBank">
                            <i class="fas fa-plus"></i> @Tr("Instructor.Bank.Add")
                        </button>
                    </div>

                    @if (bankLoading)
                    {
                        <div class="loading-container"><div class="spinner"></div><p>@Tr("Common.Loading")</p></div>
                    }
                    else if (bankAccounts.Count == 0)
                    {
                        <div class="empty-state">
                            <i class="fas fa-university"></i>
                            <h3>@Tr("Instructor.Bank.Empty")</h3>
                        </div>
                    }
                    else
                    {
                        <div class="bedaya-table-wrapper">
                            <table class="bedaya-table">
                                <thead>
                                    <tr>
                                        <th>@Tr("Instructor.Bank.Table.Bank")</th>
                                        <th>@Tr("Instructor.Bank.Table.AccountName")</th>
                                        <th>@Tr("Instructor.Bank.Table.AccountNumber")</th>
                                        <th>@Tr("Instructor.Bank.Table.IBAN")</th>
                                        <th>@Tr("Instructor.Bank.Table.Currency")</th>
                                        <th>@Tr("Instructor.Bank.Table.Default")</th>
                                        <th style="width:240px">@Tr("Instructor.Bank.Table.Actions")</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var b in bankAccounts)
                                    {
                                        <tr>
                                            <td>
                                                <div style="display:flex; flex-direction:column">
                                                    <strong>@b.BankName</strong>
                                                    <small class="muted">@b.Branch</small>
                                                </div>
                                            </td>
                                            <td>@b.AccountName</td>
                                            <td>@Mask(b.AccountNumber)</td>
                                            <td>@Mask(b.IBAN, keep: 6)</td>
                                            <td>@b.Currency</td>
                                            <td>
                                                <span class="bedaya-badge @(b.IsDefault ? "badge-success" : "badge-neutral")">
                                                    @(b.IsDefault? Tr("Common.Yes") : Tr("Common.No"))
                                                </span>
                                            </td>
                                            <td>
                                                <div style="display:flex; gap:8px; flex-wrap:wrap">
                                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="() => SetDefaultBank(b.BankAccountId)" disabled="@b.IsDefault">
                                                        <i class="fas fa-star"></i> @Tr("Instructor.Bank.SetDefault")
                                                    </button>
                                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="() => OpenEditBank(b)">
                                                        <i class="fas fa-edit"></i> @Tr("Common.Edit")
                                                    </button>
                                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="() => DeleteBank(b.BankAccountId)">
                                                        <i class="fas fa-trash"></i> @Tr("Common.Delete")
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    @if (showBankModal)
                    {
                        <div class="bedaya-modal" style="display:flex">
                            <div class="bedaya-modal-content">
                                <div class="bedaya-modal-header">
                                    <h3>@(editingBank? Tr("Instructor.Bank.Edit") : Tr("Instructor.Bank.Add"))</h3>
                                    <button class="bedaya-modal-close" @onclick="CloseBankModal">&times;</button>
                                </div>
                                <div class="bedaya-modal-body">
                                    <div class="bedaya-form-row">
                                        <div class="bedaya-form-group">
                                            <label>@Tr("Instructor.Bank.Fields.BankName")</label>
                                            <input class="bedaya-form-input" @bind="bankForm.BankName" />
                                        </div>
                                        <div class="bedaya-form-group">
                                            <label>@Tr("Instructor.Bank.Fields.Branch")</label>
                                            <input class="bedaya-form-input" @bind="bankForm.Branch" />
                                        </div>
                                    </div>
                                    <div class="bedaya-form-row">
                                        <div class="bedaya-form-group">
                                            <label>@Tr("Instructor.Bank.Fields.AccountName")</label>
                                            <input class="bedaya-form-input" @bind="bankForm.AccountName" />
                                        </div>
                                        <div class="bedaya-form-group">
                                            <label>@Tr("Instructor.Bank.Fields.AccountNumber")</label>
                                            <input class="bedaya-form-input" @bind="bankForm.AccountNumber" />
                                        </div>
                                    </div>
                                    <div class="bedaya-form-row">
                                        <div class="bedaya-form-group">
                                            <label>@Tr("Instructor.Bank.Fields.IBAN")</label>
                                            <input class="bedaya-form-input" @bind="bankForm.IBAN" />
                                        </div>
                                        <div class="bedaya-form-group">
                                            <label>@Tr("Instructor.Bank.Fields.Swift")</label>
                                            <input class="bedaya-form-input" @bind="bankForm.SwiftCode" />
                                        </div>
                                    </div>
                                    <div class="bedaya-form-row">
                                        <div class="bedaya-form-group">
                                            <label>@Tr("Instructor.Bank.Fields.Currency")</label>
                                            <input class="bedaya-form-input" @bind="bankForm.Currency" placeholder="EGP, USD, ..." />
                                        </div>
                                        <div class="bedaya-form-group">
                                            <label>@Tr("Instructor.Bank.Fields.DisplayOrder")</label>
                                            <input class="bedaya-form-input" type="number" @bind="bankForm.DisplayOrder" />
                                        </div>
                                    </div>
                                    <div class="bedaya-form-group">
                                        <label>@Tr("Instructor.Bank.Fields.Notes")</label>
                                        <textarea class="bedaya-form-textarea" @bind="bankForm.Notes"></textarea>
                                    </div>
                                    <div class="bedaya-form-group">
                                        <label class="bedaya-checkbox-container">
                                            <input type="checkbox" checked="@bankForm.IsActive" @onchange="e => bankForm.IsActive = (bool)(e.Value ?? false)" />
                                            <span class="bedaya-checkbox-checkmark"></span>
                                            @Tr("Common.Active")
                                        </label>
                                        <label class="bedaya-checkbox-container" style="margin-inline-start:14px">
                                            <input type="checkbox" checked="@bankForm.IsDefault" @onchange="e => bankForm.IsDefault = (bool)(e.Value ?? false)" />
                                            <span class="bedaya-checkbox-checkmark"></span>
                                            @Tr("Common.Default")
                                        </label>
                                    </div>
                                </div>
                                <div class="bedaya-modal-footer">
                                    <button class="bedaya-btn bedaya-btn-ghost" @onclick="CloseBankModal">@Tr("Common.Cancel")</button>
                                    <button class="bedaya-btn bedaya-btn-primary" @onclick="SaveBank" disabled="@bankSaving">
                                        @if (bankSaving)
                                        {
                                            <span class="spinner-sm"></span>
                                        }
                                        <span>@Tr("Common.Save")</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Settings -->
            <div class="bedaya-instructor-tab @(activeTab == InstructorTab.Settings ? "active" : null)">
                <div class="bedaya-instructor-settings">
                    <h3 class="bedaya-section-title">@Tr("Instructor.Settings.Title")</h3>
                    <div class="bedaya-form-row">
                        <div class="bedaya-form-group">
                            <label for="instructor-name">@Tr("Instructor.Settings.Name")</label>
                            <input id="instructor-name" class="bedaya-form-input" />
                        </div>
                        <div class="bedaya-form-group">
                            <label for="instructor-email">@Tr("Instructor.Settings.Email")</label>
                            <input id="instructor-email" type="email" class="bedaya-form-input" />
                        </div>
                    </div>
                    <div class="bedaya-form-group">
                        <label for="instructor-title">@Tr("Instructor.Settings.Title")</label>
                        <input id="instructor-title" class="bedaya-form-input" />
                    </div>
                    <div class="bedaya-form-group">
                        <label for="instructor-bio">@Tr("Instructor.Settings.Bio")</label>
                        <textarea id="instructor-bio" class="bedaya-form-textarea" rows="4" placeholder="@Tr("Instructor.Settings.Bio.Placeholder")"></textarea>
                    </div>
                    <div class="bedaya-form-row">
                        <label class="bedaya-checkbox-container">
                            <input type="checkbox" checked style="display:none" />
                            <span class="bedaya-checkbox-checkmark"></span>
                            @Tr("Instructor.Settings.Notifications")
                        </label>
                        <label class="bedaya-checkbox-container">
                            <input type="checkbox" checked style="display:none" />
                            <span class="bedaya-checkbox-checkmark"></span>
                            @Tr("Instructor.Settings.EmailUpdates")
                        </label>
                    </div>
                    <button class="bedaya-btn bedaya-btn-primary">
                        <i class="fas fa-save"></i> @Tr("Instructor.Settings.Save")
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [CascadingParameter] private Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    private int currentUserId;
    private string displayName = "";
    private string userEmail = "";
    private List<string> userRoles = new();

    private List<OrderReviewItem> payments = new();
    private string payStatusFilter = "PAID_UNVERIFIED";
    private string? paySearch;
    private int payPage = 1, payPageSize = 10;
    private int payTotal = 0;
    private bool payLoading = false;
    private bool payActing = false;

    // Summary counters (current page)
    private decimal pageTotalAmount = 0m;
    private int cntVerified = 0, cntUnverified = 0, cntRejected = 0;




    private string Tr(string key) => TranslationService.Translate(key);

    private enum InstructorTab { Dashboard, Exams, Students, Payments, Bank, Settings }
    private InstructorTab activeTab = InstructorTab.Dashboard;

    private string GetTabClass(InstructorTab t)
        => $"bedaya-instructor-nav-item {(activeTab == t ? "active" : "")}";

    private void SetTab(InstructorTab t) => activeTab = t;


    protected override async Task OnParametersSetAsync()
    {
        var auth = await AuthStateTask;
        var user = auth.User;

        if (!(user?.Identity?.IsAuthenticated ?? false))
        {
            // لو محتاج تعيد توجيه غير الموثّقين
            Navigation.NavigateTo($"/login?ReturnUrl={Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri))}", forceLoad: true);
            return;
        }

        // ID من ClaimTypes.NameIdentifier (افتراضيًا بيكون الـ UserId)
        currentUserId = (int)user.TryGetUserId();

        // الاسم/الإيميل/الأدوار
        displayName = user.Identity?.Name
                      ?? user.FindFirst(ClaimTypes.Name)?.Value
                      ?? "User";

        userEmail = user.FindFirst(ClaimTypes.Email)?.Value ?? "";

        userRoles = user.FindAll(ClaimTypes.Role)
                        .Select(r => r.Value)
                        .Distinct()
                        .ToList();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadStudents();
            await LoadPayments();
            await LoadBankAccounts();
            await LoadExams();
        }
    }

    private void NavigateToExams() => Navigation.NavigateTo("/instructor/exams");

    private async Task LoadPayments()
    {
        payLoading = true;
        StateHasChanged();

        var res = await PaymentRepository.GetOrdersForInstructorAsync(
            instructorId: currentUserId,
            status: string.IsNullOrWhiteSpace(payStatusFilter) ? null : payStatusFilter,
            page: payPage,
            pageSize: payPageSize,
            search: paySearch);

        payments = res.Items ?? new();
        payTotal = res.Total;

        // summary (current page only)
        pageTotalAmount = payments.Sum(x => x.PaidAmount);
        cntVerified = payments.Count(x => x.Status == "PAID");
        cntUnverified = payments.Count(x => x.Status == "PAID_UNVERIFIED");
        cntRejected = payments.Count(x => x.Status == "FAILED");

        payLoading = false;
        StateHasChanged();
    }

    private async Task ReloadPayments()
    {
        payPage = 1;
        await LoadPayments();
    }

    private async Task OnPayStatusChanged(ChangeEventArgs e)
    {
        payStatusFilter = e.Value?.ToString() ?? "";
        payPage = 1;
        await LoadPayments();
    }

    private RenderFragment DisplayStatusPill(string status) => builder =>
{
    var (txt, cls) = status switch
    {
        "PAID" => (Tr("Instructor.Payments.Status.Paid"), "badge-success"),
        "PAID_UNVERIFIED" => (Tr("Instructor.Payments.Status.Unverified"), "badge-warning"),
        "FAILED" => (Tr("Instructor.Payments.Status.Failed"), "badge-danger"),
        "PENDING" => (Tr("Instructor.Payments.Status.Pending"), "badge-info"),
        _ => (status, "badge-neutral")
    };

    builder.OpenElement(0, "span");
    builder.AddAttribute(1, "class", $"bedaya-badge {cls}");
    builder.AddContent(2, txt);
    builder.CloseElement();
};

    private async Task VerifyOrder(int orderId)
    {
        var ok = await JSRuntime.InvokeAsync<bool>("confirm", Tr("Instructor.Payments.Confirm.Verify"));
        if (!ok) return;

        payActing = true; StateHasChanged();
        var success = await PaymentRepository.MarkOrderVerifiedAsync(orderId, currentUserId);
        payActing = false;

        if (!success)
            await JSRuntime.InvokeVoidAsync("alert", Tr("Instructor.Payments.ActionFailed"));

        await LoadPayments();
    }

    private async Task RejectOrder(int orderId)
    {
        var ok = await JSRuntime.InvokeAsync<bool>("confirm", Tr("Instructor.Payments.Confirm.Reject"));
        if (!ok) return;

        payActing = true; StateHasChanged();
        var success = await PaymentRepository.MarkOrderRejectedAsync(orderId, currentUserId, reason: null);
        payActing = false;

        if (!success)
            await JSRuntime.InvokeVoidAsync("alert", Tr("Instructor.Payments.ActionFailed"));

        await LoadPayments();
    }

    private void PrevPayPage()
    {
        if (payPage > 1) { payPage--; _ = LoadPayments(); }
    }
    private void NextPayPage()
    {
        if (payments.Count >= payPageSize) { payPage++; _ = LoadPayments(); }
    }

    private string FormatMoney(decimal amount) => string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:0.##}", amount);

    // Blazor/C# — export current page as CSV
    private async Task ExportCurrentPageCsv()
    {
        if (payments is null || payments.Count == 0) return;

        var sb = new System.Text.StringBuilder();
        sb.AppendLine("OrderId,StudentName,StudentEmail,ExamTitle,PaidAmount,Currency,BankRef,Status,ReceiptUrl");

        // Quote + escape + neutralize Excel formulas
        static string Esc(string? s)
        {
            if (string.IsNullOrEmpty(s)) return "\"\"";
            // Neutralize potential CSV/Excel formula injection
            var first = s[0];
            if (first is '=' or '+' or '-' or '@' or '\t') s = "'" + s;

            // Escape quotes
            s = s.Replace("\"", "\"\"");
            return $"\"{s}\"";
        }

        static string Num(decimal? n) =>
            (n ?? 0m).ToString("0.##", System.Globalization.CultureInfo.InvariantCulture);

        foreach (var o in payments)
        {
            sb.AppendLine(string.Join(",",
                Esc(o.OrderId.ToString()),                                        // quote to avoid scientific notation
                Esc(string.IsNullOrWhiteSpace(o.UserName) ? $"#{o.UserId}" : o.UserName),
                Esc(o.UserEmail),
                Esc(o.ExamTitle),
                Num(o.PaidAmount),                                                 // keep numeric unquoted
                Esc(o.Currency),
                Esc(string.IsNullOrWhiteSpace(o.BankRef) ? "-" : o.BankRef),
                Esc(o.Status),
                Esc(o.ReceiptUrl)
            ));
        }

        var fileName = $"payments_page_{payPage}.csv";
        await JSRuntime.InvokeVoidAsync("downloadCsv", fileName, sb.ToString());
    }


    // ===== Bank Accounts State =====
    private List<BankAccount> bankAccounts = new();
    private bool bankLoading = false;
    private string? bankSearch;
    private bool showBankModal = false;
    private bool editingBank = false;
    private bool bankSaving = false;
    private BankAccount bankForm = new();

    // تحميل القائمة
    private async Task LoadBankAccounts()
    {
        bankLoading = true; StateHasChanged();
        bankAccounts = await BankRepo.GetActiveAccountsAsync();
        bankLoading = false; StateHasChanged();
    }
    private void ApplyBankSearch() => _ = LoadBankAccounts();

    // فتح/إغلاق المودال
    private void OpenAddBank()
    {
        editingBank = false;
        bankForm = new BankAccount { IsActive = true, Currency = "EGP" };
        showBankModal = true;
    }
    private void OpenEditBank(BankAccount b)
    {
        editingBank = true;
        bankForm = new BankAccount
        {
            BankAccountId = b.BankAccountId,
            BankName = b.BankName,
            AccountName = b.AccountName,
            AccountNumber = b.AccountNumber,
            IBAN = b.IBAN,
            SwiftCode = b.SwiftCode,
            Branch = b.Branch,
            Currency = b.Currency,
            IsActive = b.IsActive,
            IsDefault = b.IsDefault,
            DisplayOrder = b.DisplayOrder,
            Notes = b.Notes
        };
        showBankModal = true;
    }
    private void CloseBankModal() { showBankModal = false; }

    // حفظ
    private async Task SaveBank()
    {
        bankSaving = true; StateHasChanged();

        var ok = await BankRepo.UpsertAsync(bankForm) > 0;
        if (ok && bankForm.IsDefault)
        {
            // تأكد إن واحد بس Default
            await BankRepo.SetDefaultAsync(bankForm.BankAccountId);
        }

        bankSaving = false;
        showBankModal = false;

        if (!ok) await JSRuntime.InvokeVoidAsync("alert", Tr("Common.UnexpectedError"));
        await LoadBankAccounts();
    }

    // حذف
    private async Task DeleteBank(int id)
    {
        var ok = await JSRuntime.InvokeAsync<bool>("confirm", Tr("Common.ConfirmDelete"));
        if (!ok) return;

        var done = await BankRepo.DeleteAsync(id);
        if (!done) await JSRuntime.InvokeVoidAsync("alert", Tr("Common.UnexpectedError"));
        await LoadBankAccounts();
    }

    // تعيين افتراضي
    private async Task SetDefaultBank(int id)
    {
        var done = await BankRepo.SetDefaultAsync(id);
        if (!done) await JSRuntime.InvokeVoidAsync("alert", Tr("Common.UnexpectedError"));
        await LoadBankAccounts();
    }

    // Mask helper
    private string Mask(string? s, int keep = 4)
    {
        if (string.IsNullOrWhiteSpace(s)) return "-";
        var clean = new string(s.Where(char.IsLetterOrDigit).ToArray());
        if (clean.Length <= keep) return clean;
        var masked = new string('•', Math.Max(0, clean.Length - keep));
        return $"{masked}{clean[^keep..]}";
    }



    // ===== Students State =====
    private List<StudentListItem> students = new();
    private bool studentsLoading = false;
    private string? studentSearch;
    private int studentsPage = 1, studentsPageSize = 10, studentsTotal = 0;

    // details modal
    private bool showStudentModal = false;
    private StudentDetailsDto? studentDetails;

    private async Task LoadStudents()
    {
        studentsLoading = true; StateHasChanged();
        var res = await StudentsRepo.GetStudentsAsync(studentSearch, studentsPage, studentsPageSize /*, isActive: null أو true*/);
        students = res.Items;
        studentsTotal = res.Total;
        studentsLoading = false; StateHasChanged();
    }
    private async Task ReloadStudents() { studentsPage = 1; await LoadStudents(); }
    private async Task PrevStudentsPage() { if (studentsPage > 1) { studentsPage--; await LoadStudents(); } }
    private async Task NextStudentsPage() { if (students.Count >= studentsPageSize) { studentsPage++; await LoadStudents(); } }

    private async Task OpenStudentDetails(int userId)
    {
        studentDetails = null;
        showStudentModal = true; StateHasChanged();
        studentDetails = await StudentsRepo.GetStudentDetailsAsync(userId);
        StateHasChanged();
    }
    private void CloseStudentModal() { showStudentModal = false; studentDetails = null; }

    private string LastActivityText(DateTime? dt) => dt?.ToString("yyyy-MM-dd HH:mm") ?? "-";


    // ===== Exams State =====
    private List<ExamListItem> exams = new();
    private bool examsLoading2 = false; // لتفادي التضارب مع متغيرات أخرى باسم examsLoading إن وجدت
    private string? examSearch;
    private int? examCategoryId;
    private bool? examIsActive = null;
    private bool? examIsPublic = null;
    private int examsPage = 1, examsPageSize = 10, examsTotal = 0;

    private async Task LoadExams()
    {
        examsLoading2 = true; StateHasChanged();

        var res = await ExamsRepo.GetExamsAsync(
            search: examSearch,
            categoryId: examCategoryId,
            isActive: examIsActive,
            isPublic: examIsPublic,
            page: examsPage,
            pageSize: examsPageSize
        );

        exams = res.Items;
        examsTotal = res.Total;

        examsLoading2 = false; StateHasChanged();
    }

    private async Task ReloadExams() { examsPage = 1; await LoadExams(); }
    private async Task PrevExamsPage() { if (examsPage > 1) { examsPage--; await LoadExams(); } }
    private async Task NextExamsPage() { if (exams.Count >= examsPageSize) { examsPage++; await LoadExams(); } }

    // تنقّلات
    private void GoCreateExam() => Navigation.NavigateTo("/instructor/exams");
    private void GoEditExam(int id) => Navigation.NavigateTo($"/instructor/exams/{id}/questions");
    private void GoResults(int id) => Navigation.NavigateTo($"/instructor/exams/{id}/results");
    private void OnExamIsActiveChanged(ChangeEventArgs e)
    {
        var v = e?.Value?.ToString();
        examIsActive = string.IsNullOrWhiteSpace(v) ? (bool?)null : v == "1";
        // اختياري: _ = ReloadExams();
    }

    private void OnExamIsPublicChanged(ChangeEventArgs e)
    {
        var v = e?.Value?.ToString();
        examIsPublic = string.IsNullOrWhiteSpace(v) ? (bool?)null : v == "1";
        // اختياري: _ = ReloadExams();
    }



}
<script>
    window.downloadCsv = (fileName, content) => {
      try {
        const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', fileName);
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        setTimeout(() => { URL.revokeObjectURL(url); document.body.removeChild(link); }, 0);
      } catch (e) { console.error(e); }
    };
</script>
