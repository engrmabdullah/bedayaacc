@page "/courses"
@using bedayaacc.Components.Courses
@using bedayaacc.Components.Layout
@layout ExternalLayout
@inject bedayaacc.Services.TranslationService T
@inject bedayaacc.Services.Repositories.ICourseRepository CourseRepo

<div class="courses-page">
    <div class="container">
        <br />
        <br />
        <!-- Modern Header Section -->
        <div class="page-header" data-aos="fade-up">
            <div class="header-content">
                <span class="page-badge">[اكتشف]</span>
                <h1 class="page-title">@T.Translate("Courses.Title")</h1>
                <p class="page-subtitle">@T.Translate("Courses.Subtitle")</p>
            </div>
        </div>

        <!-- Modern Filters Card -->
        <div class="filters-card" data-aos="fade-up" data-aos-delay="100">
            <div class="filters-header">
                <h3>@T.Translate("Courses.FilterTitle")</h3>
                <button class="btn-reset" @onclick="ResetFilters">
                    <i class="fas fa-refresh"></i>
                    <span>@T.Translate("Courses.ClearFilters")</span>
                </button>
            </div>

            <div class="filters-grid">
                <!-- Search Input -->
                <div class="filter-group">
                    <label class="filter-label">@T.Translate("Courses.Search")</label>
                    <div class="search-input">
                        <i class="fas fa-search"></i>
                        <input class="form-input"
                               @bind="_filter.Query"
                               @bind:event="oninput"
                               placeholder="@T.Translate("Courses.SearchPlaceholder")" />
                    </div>
                </div>

                <!-- Level Filter -->
                <div class="filter-group">
                    <label class="filter-label">@T.Translate("Courses.Level")</label>
                    <select class="form-select" @bind="_levelStr">
                        <option value="">@T.Translate("Courses.All")</option>
                        <option value="Beginner">@T.Translate("Courses.Beginner")</option>
                        <option value="Intermediate">@T.Translate("Courses.Intermediate")</option>
                        <option value="Advanced">@T.Translate("Courses.Advanced")</option>
                    </select>
                </div>

                <!-- Price Filter -->
                <div class="filter-group">
                    <label class="filter-label">@T.Translate("Courses.Price")</label>
                    <select class="form-select" @bind="_priceStr">
                        <option value="">@T.Translate("Courses.All")</option>
                        <option value="free">@T.Translate("Courses.Free")</option>
                        <option value="paid">@T.Translate("Courses.Paid")</option>
                    </select>
                </div>

                <!-- Track Filter -->
                <div class="filter-group">
                    <label class="filter-label">@T.Translate("Courses.FilterByTrack")</label>
                    <select class="form-select" @bind="_selectedTrack">
                        <option value="">@T.Translate("Courses.All")</option>
                        @foreach (var tr in _tracks)
                        {
                            <option value="@tr.Slug">@tr.Title(T.CurrentLanguage)</option>
                        }
                    </select>
                </div>

                <!-- Tag Filter -->
                <div class="filter-group">
                    <label class="filter-label">@T.Translate("Courses.FilterByTag")</label>
                    <select class="form-select" @bind="_selectedTag">
                        <option value="">@T.Translate("Courses.All")</option>
                        @foreach (var tag in _allTags.OrderBy(x => x))
                        {
                            <option value="@tag">@tag</option>
                        }
                    </select>
                </div>

                <!-- Apply Button -->
                <div class="filter-group">
                    <button class="btn btn-primary" @onclick="ApplyFilter">
                        <i class="fas fa-filter"></i>
                        <span>@T.Translate("Courses.ApplyFilters")</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Results Section -->
        @if (_result is null)
        {
            <div class="loading-section">
                <div class="loading-spinner"></div>
                <p>@T.Translate("Common.Loading")</p>
            </div>
        }
        else if (_result.Total == 0)
        {
            <div class="no-results">
                <div class="no-results-icon">
                    <i class="fas fa-search"></i>
                </div>
                <h3>@T.Translate("Courses.NoResults")</h3>
                <p>@T.Translate("Courses.NoResultsDesc")</p>
                <button class="btn btn-outline" @onclick="ResetFilters">
                    @T.Translate("Courses.ShowAll")
                </button>
            </div>
        }
        else
        {
            <!-- Results Header -->
            <div class="results-header" data-aos="fade-up">
                <div class="results-count">
                    <span class="count-number">@_result.Total</span>
                    <span class="count-label">@T.Translate("Courses.ResultsFound")</span>
                </div>
            </div>

            <!-- Courses Grid -->
            <div class="courses-grid" data-aos="fade-up" data-aos-delay="200">
                @foreach (var c in _result.Items)
                {
                    <div data-aos="fade-up">
                        <CourseCard Course="c" />
                    </div>
                }
            </div>

            <!-- Modern Pagination -->
            @if (_result.TotalPages > 1)
            {
                <nav class="pagination-nav" data-aos="fade-up">
                    <div class="pagination-info">
                        @T.Translate("Courses.Page") @_result.Page @T.Translate("Common.Of") @_result.TotalPages
                    </div>
                    <div class="pagination-controls">
                        <button class="btn-pagination @(_result.Page == 1 ? "disabled" : "")"
                                @onclick="PrevPage">
                            <i class="fas fa-chevron-left"></i>
                        </button>

                        @for (int i = Math.Max(1, _result.Page - 2); i <= Math.Min(_result.TotalPages, _result.Page + 2); i++)
                        {
                            <button class="btn-pagination @(i == _result.Page ? "active" : "")"
                                    @onclick="(() => GoPage(i))">
                                @i
                            </button>
                        }

                        <button class="btn-pagination @(_result.Page == _result.TotalPages ? "disabled" : "")"
                                @onclick="NextPage">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </nav>
            }
        }
    </div>
</div>

@implements IDisposable


@code {
    private bedayaacc.Models.CourseFilter _filter = new();
    private bedayaacc.Models.PagedResult<bedayaacc.Models.CourseDto>? _result;

    // حقول مساعدة للـselects
    private string? _levelStr;
    private string? _priceStr;
    private string? _selectedTag;
    private string? _selectedTrack;

    private HashSet<string> _allTags = new();
    private IReadOnlyList<bedayaacc.Models.CourseTrack> _tracks = Array.Empty<bedayaacc.Models.CourseTrack>();


    protected override void OnInitialized()
    {
        // اسمع لتغيير اللغة
        T.OnLanguageChanged += HandleLanguageChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await T.EnsureInitAfterRenderAsync();   // نضمن تحديد اللغة (من localStorage)
            _tracks = await CourseRepo.GetTracksAsync(T.CurrentLanguage);
            _allTags = await CourseRepo.GetAllTagsAsync();
            await LoadAsync();                      // حمّل النتائج باللغة الحالية
        }
    }

    private async void HandleLanguageChanged()
    {
        try
        {
            // لما اللغة تتغير: أعد تحميل النتائج بنفس الفلاتر الحالية لكن بلغة جديدة
            var latestResult = await CourseRepo.GetAsync(_filter, T.CurrentLanguage);
            await InvokeAsync(() =>
            {
                _result = latestResult;
                StateHasChanged(); // يجبر الصفحة تعيد الريندر وبالتالي كل @T.Translate تتحدث
            });
        }
        catch
        {
            // تجاهل أي خطأ بسيط
        }
    }

    private async Task LoadAsync()
    {
        _filter.Level = _levelStr switch
        {
            "Beginner" => bedayaacc.Models.CourseLevel.Beginner,
            "Intermediate" => bedayaacc.Models.CourseLevel.Intermediate,
            "Advanced" => bedayaacc.Models.CourseLevel.Advanced,
            _ => null
        };

        _filter.FreeOnly = _priceStr switch
        {
            "free" => true,
            "paid" => false,
            _ => null
        };

        _filter.Tag = string.IsNullOrWhiteSpace(_selectedTag) ? null : _selectedTag;
        _filter.TrackSlug = string.IsNullOrWhiteSpace(_selectedTrack) ? null : _selectedTrack;

        _result = await CourseRepo.GetAsync(_filter, T.CurrentLanguage);
        StateHasChanged();
    }

    private async Task ResetFilters()
    {
        _filter = new();
        _levelStr = _priceStr = _selectedTag = _selectedTrack = null;
        await LoadAsync();
    }


    private async Task ApplyFilter()
    {
        _filter.Page = 1;
        await LoadAsync();
    }

    private async Task PrevPage()
    {
        if (_filter.Page > 1)
        {
            _filter.Page--;
            await LoadAsync();
        }
    }

    private async Task NextPage()
    {
        if (_result is not null && _filter.Page < _result.TotalPages)
        {
            _filter.Page++;
            await LoadAsync();
        }
    }

    private async Task GoPage(int p)
    {
        _filter.Page = p;
        await LoadAsync();
    }

    public void Dispose()
    {
        T.OnLanguageChanged -= HandleLanguageChanged;
    }
}

